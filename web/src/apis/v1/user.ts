// @ts-ignore
/* eslint-disable */
///////////////////////////////////////////////////////////////////////
//                                                                   //
// this file is autogenerated by service-generate                    //
// do not edit this file manually                                    //
//                                                                   //
///////////////////////////////////////////////////////////////////////
/// <reference path = "api-auto.d.ts" />
import request from '@/utils/ajax';

/**
* Update avatar of user
*/
export async function UserControllerUpdateAvatar(
  params: Paths.UserControllerUpdateAvatar.BodyParameters,
): Promise<{
    error: string;
    data: Definitions.UserWithProfile
}> {
  // /v1/user/avatar
  let _params: { [key: string]: any } = {
    ...params,
  };
  return request.post(`/v1/user/avatar`,  {
    ..._params
  });
}

/**
* Get avatar of user
*/
export async function UserControllerGetAvatar(
  params: Paths.UserControllerGetAvatar.BodyParameters,
): Promise<{
    error: string;
    data: Paths.UserControllerGetAvatar.Responses
}> {
  // /v1/user/avatar/{uid}
  let _params: { [key: string]: any } = {
    ...params,
  };
  return request.get(`/v1/user/avatar/${_params.uid}`,  {
    params: _params
  });
}

/**
* Bind email
*/
export async function UserControllerBindEmail(
  params: Definitions.BindEmailDto,
): Promise<{
    error: string;
    data: Definitions.UserWithProfile
}> {
  // /v1/user/bind/email
  let _params: { [key: string]: any } = {
    ...params,
  };
  return request.post(`/v1/user/bind/email`,  {
    ..._params
  });
}

/**
* Reset password by code
*/
export async function UserControllerResetPassword(
  params: Definitions.ResetPasswordDto,
): Promise<{
    error: string;
    data: Paths.UserControllerResetPassword.Responses
}> {
  // /v1/user/reset/password
  let _params: { [key: string]: any } = {
    ...params,
  };
  return request.post(`/v1/user/reset/password`,  {
    ..._params
  });
}

/**
* Bind password
*/
export async function UserControllerBindPassword(
  params: Definitions.BindPasswordDto,
): Promise<{
    error: string;
    data: Definitions.UserWithProfile
}> {
  // /v1/user/bind/password
  let _params: { [key: string]: any } = {
    ...params,
  };
  return request.post(`/v1/user/bind/password`,  {
    ..._params
  });
}

/**
* Bind username
*/
export async function UserControllerBindUsername(
  params: Definitions.BindUsernameDto,
): Promise<{
    error: string;
    data: Definitions.UserWithProfile
}> {
  // /v1/user/bind/username
  let _params: { [key: string]: any } = {
    ...params,
  };
  return request.post(`/v1/user/bind/username`,  {
    ..._params
  });
}

/**
* Get current user profile
*/
export async function UserControllerGetProfile(
  params: Paths.UserControllerGetProfile.BodyParameters,
): Promise<{
    error: string;
    data: Definitions.UserWithProfile
}> {
  // /v1/user/profile
  let _params: { [key: string]: any } = {
    ...params,
  };
  return request.get(`/v1/user/profile`,  {
    params: _params
  });
}

/**
* Get user upload sts
*/
export async function UserControllerGetSts(
  params: Paths.UserControllerGetSts.BodyParameters,
): Promise<{
    error: string;
    data: Definitions.UserWithSts
}> {
  // /v1/user/sts/{key}
  let _params: { [key: string]: any } = {
    ...params,
  };
  return request.post(`/v1/user/sts/${_params.key}`,  {
    ..._params
  });
}

